#!/usr/bin/python3

Description: 
- This document is meant to give details about functions, comments and common code in order to stay consistent throughout the files.
- Do not try to run this file (just meant for notes)

# ----------------------------------------------
# Title: 
# Description: A brief overview of what this script does
# Author: 
# Date created: Jan 1, 2024
# Date modified:
# ----------------------------------------------

import threading
import time
from actuators.node_actuators import NodeActuators #class
from actuators.led_controller import LEDController #class

from actuators.joints_controller import JointsController #class
from actuators.joints_movement import JointsMovement #class

from actuators.cosmetics_controller import CosmeticsController #class
from actuators.cosmetics_movement import CosmeticsMovement #class

from actuators.play_audio import play_audio  # function

class AudiobooksBehavior:
    def __init__(self):
        # Initialize all actuators
        self.led_controller = LEDController()
        self.joints_controller = JointsController()
        self.joints_movement = JointsMovement()
        self.cosmetics_controller = CosmeticsController()
        self.cosmetics_movement = CosmeticsMovement()


###LEDS###

"""led_controller.py"""
Variable constraints/info:
    - color: 0-255
    - brightness: 0-250
    - duration (seconds)
Functions:
    Description: #turn on leds for certain duration then turns them off
    Function: def toggle_led(self, duration, color, brightness):
    Thread call: threading.Thread(target=self.led_controller.toggle_led, args=(15, (255, 0, 0), 250))
        
    Description: #turn on leds indefinitely
    Function: def turn_on_led(self, color, brightness):
    Thread call: threading.Thread(target=self.led_controller.turn_on_led, args=((0, 0, 255), 250))

    Description: #turn off leds indefinitely
    Function: def turn_off_led(self):
    Thread call: threading.Thread(target=self.led_controller.turn_off_led)

    Description: #fade in leds 
    Function: def fade_in_led(self, duration, color, target_brightness):
    Thread call: threading.Thread(target=self.led_controller.fade_in_led, args=(15, (0, 0, 255), 250))
        
    Description: #fade out leds 
    Function: def fade_out_led(self, duration):
    Thread call: threading.Thread(target=self.led_controller.fade_out_led, args=(15,))

    Description: #turn on section leds (front, mid and rear) for certain duration then turns them off
    Function: def toggle_led_sections(self, duration, color_front, color_mid, color_rear, brightness):
    Thread call: threading.Thread(target=self.led_controller.toggle_led_sections, args=(15, (255, 0, 0),(0, 255, 0),(0, 0, 255), 250))

###EYES###
"""cosmetics_controller.py"""
  Variable constraints/info:
    - left_position, right_position, target_position: 0-1 (0= open, 1=close)
    - select: "left" or "right"
    - duration (seconds)

  Functions:
    Description: """Updates both eyes to a specific position."""
    Function: def position_eyes(self, left_position, right_position):
    Thread call: threading.Thread(target=self.cosmetics_controller.position_eyes, args=(0.5, 0.2))

    Description: """Move BOTH eyes from current_position to target_position over the specified duration."""
    Function: def move_eyes(self, duration, target_position):
    Thread call: threading.Thread(target=self.cosmetics_controller.move_eyes, args=(4, 0.2))

    Description: """Move ONE eye from current_position to target_position over the specified duration."""
    Function: def move_one_eye(self, duration, target_position, select):
    Thread call: threading.Thread(target=self.ecosmetics_controller.move_one_eye, args=(4, 0.2, "left"))

"""cosmetics_movement.py"""
  Functions:
    Description: """Performs a wink on either the left or right eye, with optional repetition."""
    Function: def eye_wink(self, side="left", duration, repetitions):
    Thread call: threading.Thread(target=self.cosmetics_movement.eye_wink, args=(1,5)) 

    Description: """Moves both eyes to a squinting position using smooth movement."""
    Function: def eyes_squint(self, duration):
    Thread call: threading.Thread(target=self.cosmetics_movement.eye_wink, args=(1,))  
    
    Description: """Opens both eyes to their full position using smooth movement."""
    Function: def open_eyes(self, duration):
    Thread call: threading.Thread(target=self.cosmetics_movement.open_eyes, args=(1,)) 
       
    Description: """Closes both eyes using smooth movement."""
    Function: def close_eyes(self, duration=1.0):
    Thread call: threading.Thread(target=self.cosmetics_movement.close_eyes, args=(1,))      
        
     
###EARS###
  Variable constraints/info:
    - left_position, right_position, target_position: 0-1 (0= inward, 1=outward)
    - select, side: "left" or "right"
    - duration (seconds)

"""cosmetics_controller.py"""
  Functions:
    Description: """Updates both ears to a specific position."""
    Function: def position_ears(self, left_position, right_position):
    Thread call: threading.Thread(target=self.cosmetics_controller.position_ears, args=(0.5, 0.2))

    Description: """Move BOTH ears from current_position to target_position over the specified duration."""
    Function: def move_ears(self, duration, target_position):
    Thread call: threading.Thread(target=self.cosmetics_controller.move_ears, args=(4, 0.2))

    Description: """Move ONE ear from current_position to target_position over the specified duration."""
    Function: def move_one_ear(self, duration, target_position, select):
    Thread call: threading.Thread(target=self.ecosmetics_controller.move_one_ear, args=(4, 0.2, "left"))  

"""cosmetics_movement.py"""
  Functions:
    Description: """Moves both ears to face the front using smooth movement."""
    Function: def ears_facing_front(self, duration):
    Thread call: threading.Thread(target=self.cosmetics_movement.ears_facing_front, args=(1,)) 

    Description: """Moves both ears outwards using smooth movement."""
    Function: def ear_outwards(self, duration):
    Thread call: threading.Thread(target=self.cosmetics_movement.ear_outwards, args=(1,))     

    Description: """Moves both ears inwards using smooth movement."""
    Function: def ears_inwards(self, duration):
    Thread call: threading.Thread(target=self.cosmetics_movement.ears_inwards, args=(1,)) 
    

    Description: """Moves both ears to face the same direction using smooth movement."""
    Function: def ears_facing_same_direction(self, duration, side):
    Thread call: threading.Thread(target=self.cosmetics_movement.ears_inwards, args=(1,"left"))       

        	
###Tail###
"""cosmetics_controller.py"""
  Variable constraints/info:
    - wag_position, droop_position, target_position: 0-1 (0= inward, 1=outward)
    - select: "left" or "right"
    - duration (seconds)

  Functions:
    Description: """Updates tail to a specific position."""
    Function: def position_tail(self, wag_position, droop_position):
    Thread call: threading.Thread(target=self.cosmetics_controller.position_tail, args=(0.5, 0.2))

    Description: """Move wag tail from current_position to target_position over the specified duration."""
    Function: def move_wag_tail(self, duration, target_position):
    Thread call: threading.Thread(target=self.cosmetics_controller.move_wag_tail, args=(4, 0.2))

    Description: """Move droop tail from current_position to target_position over the specified duration."""
    Function: def move_droop_tail(self, duration, target_position):
    Thread call: threading.Thread(target=self.ecosmetics_controller.move_droop_tail, args=(4, 0.2, "left"))    

"""cosmetics_movement.py"""
  Functions:
    Description: """Performs a wagging motion for the tail with optional repetition."""
    Function: def wagging_tail(self, duration, repetitions):
    Thread call: threading.Thread(target=self.cosmetics_movement.eye_wink, args=(1,5))      

        
###HEAD###
  Variable constraints/info:
    - yaw (position, target_position): -55 - 55 (-55=left, 55= right)
    - pitch (position, target_position): -22 - 8 (-22= up, 8= down)
    - duration (seconds)
 
"""joints_controller.py"""
  Functions:
    ###YAW (right and left)
    Description: """Updates the head yaw to a specific position."""
    Function: def position_yaw(self, position):
    Thread call: threading.Thread(target=self.joints_controller.position_yaw, args=(-30,))

    Description: """"Move yaw from current_yaw_position to target_position over the specified duration."""
    Function: def move_yaw(self, duration, target_position):
    Thread call: threading.Thread(target=self.joints_controller.move_yaw, args=(4, -25))

    ###PITCH (up and down)
    Description: """Updates the head pitch to a specific position."""
    Function: def position_pitch(self, position):
    Thread call: threading.Thread(target=self.joints_controller.position_pitch, args=(3,))

    Description: """"Move pitch from current_yaw_position to target_position over the specified duration."""
    Function: def move_pitch(self, duration, target_position):
    Thread call: threading.Thread(target=self.joints_controller.move_pitch, args=(4, -11))

"""joints_movement.py"""
  Functions:
    Description: """Simulates a 'yes' gesture by moving the head up and down."""
    Function: def nod(self, duration, repetitions):
    Thread call: threading.Thread(target=self.joints_movement.nod, args=(1,5))

    Description: """Simulates a 'no' gesture by moving the head left and right."""
    Function: def shake(self, duration, repetitions):
    Thread call: threading.Thread(target=self.joints_movement.shake, args=(1,5))  
 
        
###NECK###

  Variable constraints/info:
    - position, target_position: 15-40 (15= up, 40= down)
    - duration (seconds)

"""joints_controller.py"""
  Functions:
    Description: """Updates the neck to a specific position."""
    Function: def position_neck(self, position):
    Thread call: threading.Thread(target=self.joints_controller.position_neck, args=(20,))

    Description: """"Move neck from current_yaw_position to target_position over the specified duration."""
    Function: def move_neck(self, duration, target_position):
    Thread call: threading.Thread(target=self.joints_controller.move_neck, args=(4, 33))


    
